import "stdio.h"

type List = | Empty | Cons(int, List) | Leaf (int)

type ListPair = Pair (List, List)

fun sum (l : List) : int {
  let res := 0;
  
  match (l) {
      Empty {
          res = 0
      },
      Cons(var x : int, var l1 : List) {
        res = sum(l1) + x
      },
      Leaf(var x : int) {
        res = x
      }
    };
  return res
}

fun add_all (l1 : List, l2 : List) : List {
  match (Pair(l1, l2)) {
       Pair ( Empty,  Empty) {
          printf("adding two empties\n");
          return Empty
      },
       Pair ( Cons (var n1 : int,  var l1 : List),
                    Cons (var n2 : int,  var l2 : List)) {
          printf("adding two cons %d, %d\n", n1, n2);
          return Cons (n1 + n2, add_all (l1, l2))
      },
      _ {
        printf ("banana");
        return Empty
      }
    };

    printf("should not reach here");
    return Empty
}

fun iter (l: List, f: (int) => void): void {
    match (l) {
        Empty {
            skip
        },
         Cons (var n : int, var l1 : List) {
            f(n);
            iter(l1, f)
        },
         Leaf (var n : int) {
            f(n)
        }
    }
}

fun main(): void {
    let l : List = Cons (10,Cons (15, Empty()));
    let l2 : List = Cons (1,Cons (2, Cons(3, Empty())));

    iter(l, (x: int): void {printf("value: %d\n", x);});

    printf ("the sum is: %d\n", sum(l));

    let l12 := add_all(l, l2);
    iter(l12, (x: int): void {printf("value from add_all: %d\n", x);});

    printf("cculopoli");

}

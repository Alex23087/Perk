import "stdio.h"
import "stdlib.h"
import "string.h"

/*
def leibniz_pi():
    """generator for digits of pi"""
    q,r,t,k,n,l = 1,0,1,1,3,3
    while True:
        if 4*q+r-t < n*t:
            print(n)
            q,r,t,k,n,l = (10*L5,10*(r-n*t),t,k,(10*(3*q+r))//t-10*n,l)
        else:
            q,r,t,k,n,l = (q*k,(2*q+r)*l,t*l,k+1,(q*(7*k+2)+r*l)//(t*l),l+2)


> pi = g(1,0,1,1,3,3) where
> g(q,r,t,k,n,l) = if 4*q+r-t<n*t
> then n : g(10*q,10*(r-n*t),t,k,div(10*(3*q+r))t-10*n,l)
> else g(q*k,(2*q+r)*l,t*l,k+1,div(q*(7*k+2)+r*l)(t*l),l+2)
*/

fun ipow(base : int, exp : int) : int {
    let result : int = 1;
    while(1)
    {   
        BEGIN_C
        if (exp & 1)
            result *= base;
        exp >>= 1;
        if (!exp)
            break;
        base *= base;
        END_C
    };

    return result;
}

fun string_of_digit (a : int) : char* {
    let c := cast(char, a + cast(int, '0'));
    let out := "0";
    out[0] = c;
    return out;
}

fun mod (a : int, b : int) : int{
    let x : int = 0;
    BEGIN_C
    x = a % b;
    END_C;
    return x;
}

model BigInt {
    let digits : int* = cast(int*, 0),  

    fun constructor (i: int) : void {
        self.digits = cast(int*, malloc(50 * 4));
        
        for (let j: int = 0; j < 50; j++) {
            self.digits[j] = mod(i, 10);
            i = i / 10;
            printf("%d\n", self.digits[j])
        };
    },

    fun add(other: BigInt): BigInt {
        let result : BigInt = summon BigInt(0);
        let carry : int = 0;
        for (let i: int = 0; i < 50; i++) {
            let sum : int = self.digits[i] + other.digits[i] + carry;
            result.digits[i] = mod(sum, 10);
            carry = sum / 10;
        };
        return result;
    },

    fun multiply(other: BigInt): BigInt {
        let result : BigInt = summon BigInt(0);
        for (let i: int = 0; i < 50; i++) {
            for (let j: int = 0; j < 50; j++) {
                if (i + j < 50) {
                    result.digits[i + j] = result.digits[i + j] + self.digits[i] * other.digits[j];
                };
            };
        };
        return result;
    },

    fun subtract(other: BigInt): BigInt {
        let result : BigInt = summon BigInt(0);
        let borrow : int = 0;
        for (let i: int = 0; i < 50; i++) {
            let diff : int = self.digits[i] - other.digits[i] - borrow;
            if (diff < 0) {
                diff = diff + 10;
                borrow = 1;
            } else {
                borrow = 0;
            };
            result.digits[i] = diff;
        };
        return result;
    },

    fun divide(other: BigInt): BigInt {
        let quotient : BigInt = summon BigInt(0);
        let remainder : BigInt = summon BigInt(0);
        for (let i: int = 49; i >= 0; i--) {
            remainder.digits[i] = self.digits[i];
            for (let j: int = 0; j < 10; j++) {
                if (remainder.compare(other) >= 0) {
                    remainder = remainder.subtract(other);
                    quotient.digits[i] = quotient.digits[i] + 1;
                } else {
                    break;
                };
            };
        };
        return quotient;
    },

    fun compare(other: BigInt): int {
        for (let i: int = 49; i >= 0; i--) {
            if (self.digits[i] > other.digits[i]) {
                return 1;
            } else {if (self.digits[i] < other.digits[i]) {
                return -1;
            }};
        };
        return 0;
    },
    
    fun toString(): char* {
        let result : char* = malloc(51);
        let j := 0;
        let leading_zero : int = 1;
        for (let i: int = 49; i >= 0; i--) {
            printf("Digit %d: %d\n", i, self.digits[i]);
            if (self.digits[i] != 0 || !leading_zero) {
                leading_zero = 0;
                result[j] = cast(char, self.digits[i]+ cast(int, '0'));
                j++;
            };
        };
        return result;
    }
}

fun leibniz_pi(n: int): void {
    let t : (int * int * int * int * int * int) = (1, 0, 1, 1, 3, 3);
    // let t : (BigInt * BigInt * BigInt * BigInt * BigInt * BigInt) = (summon BigInt(1), summon BigInt(0), summon BigInt(1), summon BigInt(1), summon BigInt(3), summon BigInt(3));
    while (n > 0) {
        if (4 * t[0] + t[1] - t[2] < t[4] * t[2]) {
            printf("%d", t[4]);
            t = (10 * t[0], 10 * (t[1] - t[4] * t[2]), t[2], t[3], (10 * (3 * t[0] + t[1])) / t[2] - 10 * t[4], t[5]);
            n--;
        } else {
            t = (t[0] * t[3], (2 * t[0] + t[1]) * t[5], t[2] * t[5], t[3] + 1, (t[0] * (7 * t[3] + 2) + t[1] * t[5]) / (t[2] * t[5]), t[5] + 2)
        };
    };
}


fun main (): int {
    printf("Digits of pi:\n");
    //leibniz_pi(100);

    let a := summon BigInt(500);
    let b := summon BigInt(500);

    let c := a.multiply(b);

    printf("%s", c.toString());

    printf("\n");
    return 0;
}
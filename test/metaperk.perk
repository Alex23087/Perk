import "stdio.h"
import "stdlib.h"
import "ctype.h"
import "string.h"

// extern printf : (char*, ...) -> int
// extern atoi : char* -> int
// extern strcmp : (char*, char*) -> int
// extern exit : int -> void
extern isspace : char -> int
extern isdigit : char -> int
// extern strlen : char* -> int
// extern malloc : int -> void*
// extern strcpy : (char*, char*) -> void
// extern free : void* -> void
// extern puts : char* -> void


model TokenStack {
    let val := ("END", 0),
    let next : TokenStack? = nothing,

    fun constructor (tok : (char* * int)) : void {
        self.val = tok;
    },

    fun push (tok : (char* * int)) : void {        
        let new_elem := summon TokenStack(tok);
        let last_elem := self;

        while(last_elem.next?){
            last_elem = last_elem.next!;
        };

        last_elem.next = new_elem;
    },

    fun pop () : (char* * int) {
        
        let last_elem := self;
        let new_last_elem := self;

        while(last_elem.next?){
            new_last_elem = last_elem;
            last_elem = last_elem.next!;
        };
        
        new_last_elem.next = nothing;

        // buggaroni here, type inference does not infer
        let res : (char* * int) = last_elem.val;

        if(cast(void*, last_elem) != cast(void*, self)){
            banish last_elem;
        };
        
        return res
    },

    fun copy() : TokenStack {
        let res := summon TokenStack(self.val);
        
        if (!self.next?) {
            return res;
        };

        res.next = self.next!.copy();
        return res;
    },

    fun print() : void {
        let cur_elem : TokenStack = self;

        while(cur_elem.next?){
            let val : (char* * int) = cur_elem.val;
            printf("%s\t%d\n", val[0], val[1]);
            cur_elem = cur_elem.next!;
        };
        let val : (char* * int) = cur_elem.val;
        printf("%s\t%d\n", val[0], val[1]);
    }
}

// failure with message
fun failwith (msg : char*) : void {
    printf ("Failure: %s\n", msg);
    exit(1);
}

fun alloc_string (size : size_t) : char*? {
    let sub : char* = cast(char*, malloc(size + 1));
    let success := 0;
    BEGIN_C
    success = (sub != 0);
    END_C;
    if(success) {
        return just sub;
    } else {
        return nothing of char*?;
    }
}

// curried equality function
fun streq (s1 : char*) : char* => bool {
    return (s2 : char*) : bool {return (strcmp (s1, s2) == 0)}
}

// curried get index
fun str_get_index (s : char*) : int => char {
    let len := strlen(s);
    return (i : int) : char {
        if(i >= len) {
            failwith ("Tried to get out of bounds string index")
        };

        let c : char = cast(char, 0);
        let _s := s;
        BEGIN_C
        c = _s[i];
        END_C;
        return c
    }
}

fun substring (str : char*, start : int, end : int) : char* {

    let len : size_t = strlen(str);

    if (start > end || start > len || end > len) {
        failwith ("Invalid substring range");
    };

    let sublen : int = end - start;
    let sub : char*? = alloc_string(cast(size_t, sublen));
    
    if (!sub?) {
        failwith("Malloc Failed");
    };

    let sub_ptr := sub!;

    BEGIN_C
    memcpy(sub_ptr, str + start, sublen);
    sub_ptr[sublen] = '\0';
    END_C;

    return sub_ptr;
}

// recognizes arithmetical operators
fun lex_operator(s : char*) : ((char*) * int) {
    let eq := streq (s);

    if(eq("+"))         {return ("Plus", 0)};
    if(eq("*"))         {return ("Times", 0)};
    if(eq("/"))         {return ("Div", 0)};
    if(eq("-"))         {return ("Minus", 0)};
    if(eq("="))         {return ("Eq", 0)};
    if(eq("<"))         {return ("Lt", 0)};
    if(eq("!="))        {return ("Neq", 0)};
    if(eq("choose"))    {return ("Choose", 0)};
    if(eq(";"))         {return ("Seq", 0)};
    if(eq("store"))     {return ("Store", 0)};
    if(eq("load"))      {return ("Load", 0)};
    if(eq("print"))     {return ("Print", 0)};
    if(eq("repeat"))    {return ("Repeat", 0)};
    if(eq("while"))     {return ("While", 0)};
    
    failwith("Unrecognized arithmetical operator");
}

fun parse_int(s : char*) : ((char*) * int) {
    return ("Num", atoi(s))
}

fun reverse_string (s : char*) : char* {
    let len := strlen (s);
    let r : char* = cast(char*, malloc(len + 1));
    BEGIN_C
    if (!r) return NULL;
    for (size_t i = 0; i < len; ++i) {
        r[i] = s[len - 1 - i];
    }
    r[len] = '\0';
    END_C;
    return r;
}

fun tokenize_string (s : char*) : void* {  // UGH! This cannot return TokenStack!
    s = reverse_string(s);
    let stack := summon TokenStack (("END", 0));
    let len := strlen (s);
    let get := str_get_index (s);

    let cur_word_start := 0;
    let cur_word_end := 0;

    let i := 0;
    for (i = 0; i < len+1; i++){
        let c := if i >= len then ' ' else get(i);

        if ((isspace(c)) && cur_word_start != cur_word_end) {
            let sub_1 := substring(s, cur_word_start, cur_word_end);
            let sub := reverse_string(sub_1);
            let tok := ("", 0);
            if(isdigit(get(cur_word_start))){
                tok = parse_int(sub);
            } else {
                tok = lex_operator(sub);
            };
            stack.push(tok);
            free(cast(void*, sub));
            free(cast(void*, sub_1));
        };

        if(isspace(c)){
            cur_word_end = i+1;
            cur_word_start = cur_word_end 
        } else{
            cur_word_end = i+1;
        }
    };
    free(cast(void*, s));
    return stack;
}

let memory : [int 256] = []

fun skip_computation (stack_vp : void*) : (void*){
    let stack := cast (TokenStack, stack_vp);

    let done := streq("END");
    let tok := stack.pop();
    if (!done(tok[0])) {
        let eq := streq (tok[0]);
        if (eq("Num")) {
            return (cast(void*, stack));
        } else {
            let op := tok[0];
            
        };
        
        // binary operations
        if(eq("Plus") || eq("Times") || eq("Div") || eq("Minus") || eq("Eq") || eq("Lt") || eq("Neq") || eq("Seq") || eq("Store") || eq("Repeat") || eq ("While")) {
            let res1 := skip_computation (cast(void*, stack));
            let res2 := skip_computation (res1);

            return cast(void*, stack)
        };

        // ternary operations
        if(eq("Choose")) {
            let res1 := skip_computation (cast(void*, stack));
            let res2 := skip_computation (res1);
            let res3 := skip_computation (res2);

            return cast(void*, stack)
        };

        // unary operations
        if(eq("Load") || eq("Print")) {
            let res1 := skip_computation (cast(void*, stack));
            return cast(void*, stack)
        };

        failwith("Operation not yet implemented"); 
    };

    failwith ("Skip reached end of stack.")
}

fun execute_computation (stack_vp : void*) : (void* * int){
    let stack := cast (TokenStack, stack_vp);

    let done := streq("END");
    let tok := stack.pop();
    if (!done(tok[0])) {
        let eq := streq (tok[0]);
        if (eq("Num")) {
            return (cast(void*, stack), tok[1]);
        } else {
            let op := tok[0];
            
        };
        
        if(eq("Plus")) {
            let res1 := execute_computation (cast(void*, stack));
            let res2 := execute_computation (res1[0]);

            return (cast(void*, stack), res1[1] + res2[1])
        };

        if(eq("Times")) {
            let res1 := execute_computation (cast(void*, stack));
            let res2 := execute_computation (res1[0]);

            return (cast(void*, stack), res1[1] * res2[1])
        };

        if(eq("Div")) {
            let res1 := execute_computation (cast(void*, stack));
            let res2 := execute_computation (res1[0]);

            if (res2[1] == 0){
                failwith ("Attempted division by zero!");
            };
            return (cast(void*, stack), res1[1] / res2[1])
        };

        if(eq("Eq")) {
            let res1 := execute_computation (cast(void*, stack));
            let res2 := execute_computation (res1[0]);

            return (cast(void*, stack), cast(int, res1[1] == res2[1]))
        };
        
        if(eq("Lt")) {
            let res1 := execute_computation (cast(void*, stack));
            let res2 := execute_computation (res1[0]);

            return (cast(void*, stack), cast(int, res1[1] < res2[1]))
        };

        if(eq("Neq")) {
            let res1 := execute_computation (cast(void*, stack));
            let res2 := execute_computation (res1[0]);

            return (cast(void*, stack), cast(int, res1[1] != res2[1]))
        };

        if(eq("Minus")) {
            let res1 := execute_computation (cast(void*, stack));
            let res2 := execute_computation (res1[0]);

            return (cast(void*, stack), res1[1] - res2[1])
        };

        if(eq("Choose")) {
            let res1 := execute_computation (cast(void*, stack));
            let res2 := if res1[1] == 1 then execute_computation (res1[0]) else (skip_computation(res1[0]), 0);
            let res3 := if res1[1] != 1 then execute_computation (res2[0]) else (skip_computation(res2[0]), 0);

            return (cast(void*, stack), if res1[1] == 1 then res2[1] else res3[1])
        };

        if(eq("Seq")) {
            let res1 := execute_computation (cast(void*, stack));
            let res2 := execute_computation (res1[0]);

            return (cast(void*, stack), res2[1])
        };

        if(eq("Load")) {
            let res1 := execute_computation (cast(void*, stack));

            if (res1[1] < 0 || res1[1] >= 256) {
                failwith ("metaperk: attempted out of bounds read")
            };

            return (cast(void*, stack), memory[res1[1]])
        };

        if(eq("Store")) {
            let res1 := execute_computation (cast(void*, stack));
            let res2 := execute_computation (res1[0]);

            if (res1[1] < 0 || res1[1] >= 256) {
                failwith ("metaperk: attempted out of bounds read")
            };

            memory[res1[1]] = res2[1];

            return (cast(void*, stack), 0)
        };

        if(eq("Print")) {
            let res1 := execute_computation (cast(void*, stack));

            printf("Program printed: %d\n", res1[1]);

            return (cast(void*, stack), 0)
        };

        if(eq("Repeat")) {
            let res1 := execute_computation (cast(void*, stack));
            let iter := 0;

            let res2 := (cast(void*, stack), 0);

            for (iter = 0; iter < res1[1] ; iter ++) {
                let stack_copy_vp := cast(TokenStack, res1[0]).copy();
                
                let stack_copy := cast(TokenStack, stack_copy_vp);

                res2 = execute_computation (stack_copy_vp);
            };

            return (cast(void*, stack), res2[1]);
        };

        if(eq("While")) {
            let cond_stack := stack.copy();
            let cond_eval := execute_computation(cast(void*, stack));

            let res2 := (cast(void*, stack), 0);

            while(cond_eval[1] == 1) {
                let body_stack := cast(TokenStack, cond_eval[0]).copy();
                res2 = execute_computation (body_stack);
                cond_eval = execute_computation(cond_stack.copy());;
            };

            return (cast(void*, stack), res2[1]);
        };

        failwith("Operation not yet implemented"); 
    };

    failwith ("Computation reached end of stack.")
}

fun main () : int {
    let fib : char* = "; ; store 1 0 store 2 1 while < load 3 100 ; ; ; store 3 + load 1 load 2 print load 3 store 1 load 2 store 2 load 3";

    let toks := cast (TokenStack, tokenize_string(fib));

    printf("Program tokens:\n");
    toks.print();
    printf("\n==========\n\n");

    let res := execute_computation(cast(void*, toks));
    
    printf("\nprogram result:\t %d\n", res[1]);

    return 0;
}

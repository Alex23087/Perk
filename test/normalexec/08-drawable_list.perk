import "stdio.h"

extern printf: (char*, ...) -> void

archetype Drawable {
    pinselo : int
}

model Panano : Drawable {
    let pinselo := 17,
    
    fun constructor(x: int) : void {
        self.pinselo = x;
    }
}

model List {
    let head : <Drawable>? = nothing,
    let tail : List? = none,

    fun push_head(x: <Drawable>) : List {
        if (!self.head?){
            self.head = some x;
            return self;
        }else{
            let newList := summon List();
            newList.head = some x;
            newList.tail = self;
            return newList;
        }
    },

    fun push_tail(x: <Drawable>) : void {
        if (!self.head?){
            self.head = some x;
        }else{
            let newList := summon List();
            newList.head = some x;
            let current := self;
            while (current.tail?) {
                current = current.tail!;
            };
            current.tail = newList;
        }
    },

    fun foreach(f : (<Drawable>) => void) : void {
        if (self.head?) {   
            // printf ("QUAUA%d\n", self.head!.pinselo);
            f(self.head!);
            if (self.tail?) {
                self.tail!.foreach(f);
            }
        }
    }
}

fun main () : int {
    let l := summon List();
    let panano := summon Panano(1);
    l.push_tail(panano ~> Drawable);
    panano = summon Panano(2);
    l.push_tail(panano ~> Drawable);
    panano = summon Panano(3);
    l.push_tail(panano ~> Drawable);
    // panano = summon Panano(4);
    // l.push_tail(panano ~> Drawable);
    // panano = summon Panano(5);
    // l.push_tail(panano ~> Drawable);
    // panano = summon Panano(6);
    // l.push_tail(panano ~> Drawable);
    // panano = summon Panano(7);
    // l.push_tail(panano ~> Drawable);
    // panano = summon Panano(8);
    // l.push_tail(panano ~> Drawable);
    
    let printx := (x: <Drawable>) : void {
        printf("QUAUA%d\n", x.pinselo);
    };

    l.foreach(printx);

    panano.pinselo = 42;

    printf("QUAUALa%d\n", panano.pinselo);

    return 0;
}
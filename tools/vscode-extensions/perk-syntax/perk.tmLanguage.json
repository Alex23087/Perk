{
  "scopeName": "source.perk",
  "name": "Perk",
  "patterns": [
    {
      "include": "#comments"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#numbers"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#types"
    },
    {
      "include": "#functions"
    },
    {
      "include": "#embedded-c"
    },
    {
      "include": "#lambdas"
    }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.line.double-slash.perk",
          "match": "//.*$"
        },
        {
          "name": "comment.block.perk",
          "begin": "/\\*",
          "end": "\\*/"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.perk",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape.perk",
              "match": "\\\\."
            }
          ]
        },
        {
          "name": "string.quoted.single.perk",
          "begin": "'",
          "end": "'",
          "patterns": [
            {
              "name": "constant.character.escape.perk",
              "match": "\\\\."
            }
          ]
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.hex.perk",
          "match": "\\b0x[0-9a-fA-F]+\\b"
        },
        {
          "name": "constant.numeric.octal.perk",
          "match": "\\b0o[0-7]+\\b"
        },
        {
          "name": "constant.numeric.binary.perk",
          "match": "\\b0b[01]+\\b"
        },
        {
          "name": "constant.numeric.float.perk",
          "match": "\\b\\d+\\.\\d+\\b"
        },
        {
          "name": "constant.numeric.perk",
          "match": "\\b\\d+\\b"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.perk",
          "match": "\\b(let|import|open|extern|archetype|model|struct|private|public|fun|for|while|do|if|then|else|return|summon|banish|make|cast)\\b"
        },
        {
          "name": "keyword.other.begin-c.perk",
          "match": "\\bBEGIN_C\\b"
        },
        {
          "name": "keyword.other.end-c.perk",
          "match": "\\bEND_C\\b"
        }
      ]
    },
    "types": {
      "patterns": [
        {
          "name": "storage.type.perk",
          "match": "\\b(int|void|uint8_t|uint16_t|uint32_t|uint64_t|float|double|bool|char)\\b"
        }
      ]
    },
    "functions": {
      "patterns": [
        {
          "name": "entity.name.function.definition.perk",
          "match": "\\bfun\\s+(\\w+)"
        },
        {
          "name": "entity.name.function.perk",
          "match": "\\blet\\s+(\\w+)\\s*:"
        }
      ]
    },
    "embedded-c": {
      "patterns": [
        {
          "name": "source.c.embedded.perk",
          "begin": "\\bBEGIN_C\\b",
          "end": "\\bEND_C\\b",
          "patterns": [
            {
              "include": "source.c"
            }
          ]
        }
      ]
    }
  }
}